<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: realtime-bidding.proto

namespace BidResponse\Ad;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>BidResponse.Ad.AdSlot</code>
 */
class AdSlot extends \Google\Protobuf\Internal\Message
{
    /**
     * The slot id from the BidRequest that the ad may appear in.
     *
     * Generated from protobuf field <code>int32 id = 1;</code>
     */
    protected $id = 0;
    /**
     * The maximum CPM you want to be charged if you win the auction for this
     * ad slot, expressed in micros of the specified currency or default
     * bidding currency. For example, to bid a CPM of 1.29 USD, set
     * max_cpm_micros = 1290000. Winning bids are rounded up to billable
     * units. For example, in USD, bids are rounded up to the next multiple
     * of 10,000 micros (one cent).
     *
     * Generated from protobuf field <code>int64 max_cpm_micros = 2;</code>
     */
    protected $max_cpm_micros = 0;
    /**
     * The minimum CPM you want to be charged if you win the auction for this
     * ad slot, expressed in micros of the specified currency or default
     * bidding currency. This may represent a second price if you choose
     * max_cpm_micros as the highest of several bids, or some form of reserve
     * price if you want to override the reserve price set by the publisher.
     * The bid must be less than or equal to max_cpm_micros or it will be
     * ignored. This field is optional and does not need to be set. This
     * field is not applicable when responding to bid requests with
     * auction_type set to FIRST_PRICE.
     *
     * Generated from protobuf field <code>optional int64 min_cpm_micros = 3;</code>
     */
    protected $min_cpm_micros = null;
    /**
     * The currency used by max_cpm_micros and min_cpm_micros, using ISO-4217
     * alpha codes. If this field is populated, the specified currency will
     * be used to interpret the bid. Otherwise, the default bidding currency
     * will be used, which is determined in the following priority:
     * 1. The bidder-level currency, if configured in RTB account settings.
     * 2. The buyer-level currency. The buyer will be determined by the
     * billing ID specified in the billing_id field of the bid response if it
     * is populated, otherwise it will be based on the sole billing ID sent
     * in the bid request.
     * The currency of a buyer account is set on account creation and can be
     * checked by contacting a Technical Account Manager.
     *
     * Generated from protobuf field <code>optional string currency = 15;</code>
     */
    protected $currency = null;
    /**
     * Billing id to attribute this impression to. The value must be in the
     * set of billing ids for this slot that were sent in the
     * BidRequest.AdSlot.matching_ad_data.billing_id. This must always be set
     * if the BidRequest has more than one
     * BidRequest.AdSlot.matching_ad_data.billing_id or if the bidder has
     * active child seats.
     *
     * Generated from protobuf field <code>optional int64 billing_id = 4;</code>
     */
    protected $billing_id = null;
    /**
     * The deal id that you want this bid to participate in. Leave unset
     * or set it to "1" if a deal is available but you want to
     * ignore the deal and participate in the open auction.
     *
     * Generated from protobuf field <code>optional int64 deal_id = 5;</code>
     */
    protected $deal_id = null;
    /**
     * For exchange bidders (third party exchanges doing real-time bidding on
     * DFP), the deal id from the exchange's namespace that is associated with
     * this bid and reported to publishers. Leave unset if there is no
     * associated deal. This is arbitrary UTF8 text and must be at most 64
     * bytes.
     *
     * Generated from protobuf field <code>optional string exchange_deal_id = 6;</code>
     */
    protected $exchange_deal_id = null;
    /**
     *[default = OPEN_AUCTION];
     *
     * Generated from protobuf field <code>optional .BidResponse.Ad.AdSlot.ExchangeDealType exchange_deal_type = 7;</code>
     */
    protected $exchange_deal_type = null;
    /**
     * The seat ID in the bidder's namespace representing the seat on whose
     * behalf this bid was made.
     *
     * Generated from protobuf field <code>optional string seat_id = 25;</code>
     */
    protected $seat_id = null;
    /**
     * Buyer declared ID which will be used to break down spend and invalid
     * traffic metrics in IVT transparency reporting in Query Tool. Note that
     * IDs with fewer than 1000 impressions will not be used to break down
     * metrics. IDs longer than 64 bytes will be ignored.
     *
     * Generated from protobuf field <code>optional string buyer_reporting_id = 8;</code>
     */
    protected $buyer_reporting_id = null;
    /**
     * Token used to identify end third party buyer information if an
     * exchange as an open bidder is an intermediary. This is obtained from
     * the third party buyer and must be passed to Google unaltered in the bid
     * response.
     *
     * Generated from protobuf field <code>optional string third_party_buyer_token = 12;</code>
     */
    protected $third_party_buyer_token = null;
    /**
     * Generated from protobuf field <code>repeated .BidResponse.Ad.AdSlot.FrequencyCap frequency_cap = 16;</code>
     */
    private $frequency_cap;
    /**
     * Indicates that the bid is only eligible
     * for a specific position within the pod.
     *
     * Generated from protobuf field <code>optional .BidResponse.Ad.AdSlot.PodPosition position_in_pod = 22;</code>
     */
    protected $position_in_pod = null;
    /**
     * All bids with the same bid_group_id will be won or lost as a group.
     * Bids must have a non-empty bid_group_id to allow an ad to be played
     * as part of a pod.
     * This field is currently only supported for rewarded video pods
     * requests. If an ad is submitted on multiple positional bids
     * represented by AdSlot messages, each bid (AdSlot message)
     * must have a different bid_group_id.
     * For example, if a bidder wants to bid ad_1 for first position
     * and last position in the pod and ad_2 for any position and
     * want to ensure either both win at the same time or neither of those
     * wins, bidder needs to submit:
     * ad {
     *   buyer_creative_id: "ad_1",
     *   adslot {
     *     position_in_pod: POD_POSITION_FIRST,
     *     bid_group_id: "group1"
     *   },
     *   adslot {
     *     position_in_pod: POD_POSITION_LAST,
     *     bid_group_id: "group2"
     *   }
     * },
     * ad {
     *   buyer_creative_id: "ad_2",
     *   adslot {
     *     position_in_pod: POD_POSITION_ANY,
     *     bid_group_id: "group1"
     *   },
     *   adslot {
     *     position_in_pod: POD_POSITION_ANY,
     *     bid_group_id: "group2"
     *   }
     * }
     *
     * Generated from protobuf field <code>optional string bid_group_id = 23;</code>
     */
    protected $bid_group_id = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int $id
     *           The slot id from the BidRequest that the ad may appear in.
     *     @type int|string $max_cpm_micros
     *           The maximum CPM you want to be charged if you win the auction for this
     *           ad slot, expressed in micros of the specified currency or default
     *           bidding currency. For example, to bid a CPM of 1.29 USD, set
     *           max_cpm_micros = 1290000. Winning bids are rounded up to billable
     *           units. For example, in USD, bids are rounded up to the next multiple
     *           of 10,000 micros (one cent).
     *     @type int|string $min_cpm_micros
     *           The minimum CPM you want to be charged if you win the auction for this
     *           ad slot, expressed in micros of the specified currency or default
     *           bidding currency. This may represent a second price if you choose
     *           max_cpm_micros as the highest of several bids, or some form of reserve
     *           price if you want to override the reserve price set by the publisher.
     *           The bid must be less than or equal to max_cpm_micros or it will be
     *           ignored. This field is optional and does not need to be set. This
     *           field is not applicable when responding to bid requests with
     *           auction_type set to FIRST_PRICE.
     *     @type string $currency
     *           The currency used by max_cpm_micros and min_cpm_micros, using ISO-4217
     *           alpha codes. If this field is populated, the specified currency will
     *           be used to interpret the bid. Otherwise, the default bidding currency
     *           will be used, which is determined in the following priority:
     *           1. The bidder-level currency, if configured in RTB account settings.
     *           2. The buyer-level currency. The buyer will be determined by the
     *           billing ID specified in the billing_id field of the bid response if it
     *           is populated, otherwise it will be based on the sole billing ID sent
     *           in the bid request.
     *           The currency of a buyer account is set on account creation and can be
     *           checked by contacting a Technical Account Manager.
     *     @type int|string $billing_id
     *           Billing id to attribute this impression to. The value must be in the
     *           set of billing ids for this slot that were sent in the
     *           BidRequest.AdSlot.matching_ad_data.billing_id. This must always be set
     *           if the BidRequest has more than one
     *           BidRequest.AdSlot.matching_ad_data.billing_id or if the bidder has
     *           active child seats.
     *     @type int|string $deal_id
     *           The deal id that you want this bid to participate in. Leave unset
     *           or set it to "1" if a deal is available but you want to
     *           ignore the deal and participate in the open auction.
     *     @type string $exchange_deal_id
     *           For exchange bidders (third party exchanges doing real-time bidding on
     *           DFP), the deal id from the exchange's namespace that is associated with
     *           this bid and reported to publishers. Leave unset if there is no
     *           associated deal. This is arbitrary UTF8 text and must be at most 64
     *           bytes.
     *     @type int $exchange_deal_type
     *          [default = OPEN_AUCTION];
     *     @type string $seat_id
     *           The seat ID in the bidder's namespace representing the seat on whose
     *           behalf this bid was made.
     *     @type string $buyer_reporting_id
     *           Buyer declared ID which will be used to break down spend and invalid
     *           traffic metrics in IVT transparency reporting in Query Tool. Note that
     *           IDs with fewer than 1000 impressions will not be used to break down
     *           metrics. IDs longer than 64 bytes will be ignored.
     *     @type string $third_party_buyer_token
     *           Token used to identify end third party buyer information if an
     *           exchange as an open bidder is an intermediary. This is obtained from
     *           the third party buyer and must be passed to Google unaltered in the bid
     *           response.
     *     @type array<\BidResponse\Ad\AdSlot\FrequencyCap>|\Google\Protobuf\Internal\RepeatedField $frequency_cap
     *     @type int $position_in_pod
     *           Indicates that the bid is only eligible
     *           for a specific position within the pod.
     *     @type string $bid_group_id
     *           All bids with the same bid_group_id will be won or lost as a group.
     *           Bids must have a non-empty bid_group_id to allow an ad to be played
     *           as part of a pod.
     *           This field is currently only supported for rewarded video pods
     *           requests. If an ad is submitted on multiple positional bids
     *           represented by AdSlot messages, each bid (AdSlot message)
     *           must have a different bid_group_id.
     *           For example, if a bidder wants to bid ad_1 for first position
     *           and last position in the pod and ad_2 for any position and
     *           want to ensure either both win at the same time or neither of those
     *           wins, bidder needs to submit:
     *           ad {
     *             buyer_creative_id: "ad_1",
     *             adslot {
     *               position_in_pod: POD_POSITION_FIRST,
     *               bid_group_id: "group1"
     *             },
     *             adslot {
     *               position_in_pod: POD_POSITION_LAST,
     *               bid_group_id: "group2"
     *             }
     *           },
     *           ad {
     *             buyer_creative_id: "ad_2",
     *             adslot {
     *               position_in_pod: POD_POSITION_ANY,
     *               bid_group_id: "group1"
     *             },
     *             adslot {
     *               position_in_pod: POD_POSITION_ANY,
     *               bid_group_id: "group2"
     *             }
     *           }
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\RealtimeBidding::initOnce();
        parent::__construct($data);
    }

    /**
     * The slot id from the BidRequest that the ad may appear in.
     *
     * Generated from protobuf field <code>int32 id = 1;</code>
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * The slot id from the BidRequest that the ad may appear in.
     *
     * Generated from protobuf field <code>int32 id = 1;</code>
     * @param int $var
     * @return $this
     */
    public function setId($var)
    {
        GPBUtil::checkInt32($var);
        $this->id = $var;

        return $this;
    }

    /**
     * The maximum CPM you want to be charged if you win the auction for this
     * ad slot, expressed in micros of the specified currency or default
     * bidding currency. For example, to bid a CPM of 1.29 USD, set
     * max_cpm_micros = 1290000. Winning bids are rounded up to billable
     * units. For example, in USD, bids are rounded up to the next multiple
     * of 10,000 micros (one cent).
     *
     * Generated from protobuf field <code>int64 max_cpm_micros = 2;</code>
     * @return int|string
     */
    public function getMaxCpmMicros()
    {
        return $this->max_cpm_micros;
    }

    /**
     * The maximum CPM you want to be charged if you win the auction for this
     * ad slot, expressed in micros of the specified currency or default
     * bidding currency. For example, to bid a CPM of 1.29 USD, set
     * max_cpm_micros = 1290000. Winning bids are rounded up to billable
     * units. For example, in USD, bids are rounded up to the next multiple
     * of 10,000 micros (one cent).
     *
     * Generated from protobuf field <code>int64 max_cpm_micros = 2;</code>
     * @param int|string $var
     * @return $this
     */
    public function setMaxCpmMicros($var)
    {
        GPBUtil::checkInt64($var);
        $this->max_cpm_micros = $var;

        return $this;
    }

    /**
     * The minimum CPM you want to be charged if you win the auction for this
     * ad slot, expressed in micros of the specified currency or default
     * bidding currency. This may represent a second price if you choose
     * max_cpm_micros as the highest of several bids, or some form of reserve
     * price if you want to override the reserve price set by the publisher.
     * The bid must be less than or equal to max_cpm_micros or it will be
     * ignored. This field is optional and does not need to be set. This
     * field is not applicable when responding to bid requests with
     * auction_type set to FIRST_PRICE.
     *
     * Generated from protobuf field <code>optional int64 min_cpm_micros = 3;</code>
     * @return int|string
     */
    public function getMinCpmMicros()
    {
        return isset($this->min_cpm_micros) ? $this->min_cpm_micros : 0;
    }

    public function hasMinCpmMicros()
    {
        return isset($this->min_cpm_micros);
    }

    public function clearMinCpmMicros()
    {
        unset($this->min_cpm_micros);
    }

    /**
     * The minimum CPM you want to be charged if you win the auction for this
     * ad slot, expressed in micros of the specified currency or default
     * bidding currency. This may represent a second price if you choose
     * max_cpm_micros as the highest of several bids, or some form of reserve
     * price if you want to override the reserve price set by the publisher.
     * The bid must be less than or equal to max_cpm_micros or it will be
     * ignored. This field is optional and does not need to be set. This
     * field is not applicable when responding to bid requests with
     * auction_type set to FIRST_PRICE.
     *
     * Generated from protobuf field <code>optional int64 min_cpm_micros = 3;</code>
     * @param int|string $var
     * @return $this
     */
    public function setMinCpmMicros($var)
    {
        GPBUtil::checkInt64($var);
        $this->min_cpm_micros = $var;

        return $this;
    }

    /**
     * The currency used by max_cpm_micros and min_cpm_micros, using ISO-4217
     * alpha codes. If this field is populated, the specified currency will
     * be used to interpret the bid. Otherwise, the default bidding currency
     * will be used, which is determined in the following priority:
     * 1. The bidder-level currency, if configured in RTB account settings.
     * 2. The buyer-level currency. The buyer will be determined by the
     * billing ID specified in the billing_id field of the bid response if it
     * is populated, otherwise it will be based on the sole billing ID sent
     * in the bid request.
     * The currency of a buyer account is set on account creation and can be
     * checked by contacting a Technical Account Manager.
     *
     * Generated from protobuf field <code>optional string currency = 15;</code>
     * @return string
     */
    public function getCurrency()
    {
        return isset($this->currency) ? $this->currency : '';
    }

    public function hasCurrency()
    {
        return isset($this->currency);
    }

    public function clearCurrency()
    {
        unset($this->currency);
    }

    /**
     * The currency used by max_cpm_micros and min_cpm_micros, using ISO-4217
     * alpha codes. If this field is populated, the specified currency will
     * be used to interpret the bid. Otherwise, the default bidding currency
     * will be used, which is determined in the following priority:
     * 1. The bidder-level currency, if configured in RTB account settings.
     * 2. The buyer-level currency. The buyer will be determined by the
     * billing ID specified in the billing_id field of the bid response if it
     * is populated, otherwise it will be based on the sole billing ID sent
     * in the bid request.
     * The currency of a buyer account is set on account creation and can be
     * checked by contacting a Technical Account Manager.
     *
     * Generated from protobuf field <code>optional string currency = 15;</code>
     * @param string $var
     * @return $this
     */
    public function setCurrency($var)
    {
        GPBUtil::checkString($var, True);
        $this->currency = $var;

        return $this;
    }

    /**
     * Billing id to attribute this impression to. The value must be in the
     * set of billing ids for this slot that were sent in the
     * BidRequest.AdSlot.matching_ad_data.billing_id. This must always be set
     * if the BidRequest has more than one
     * BidRequest.AdSlot.matching_ad_data.billing_id or if the bidder has
     * active child seats.
     *
     * Generated from protobuf field <code>optional int64 billing_id = 4;</code>
     * @return int|string
     */
    public function getBillingId()
    {
        return isset($this->billing_id) ? $this->billing_id : 0;
    }

    public function hasBillingId()
    {
        return isset($this->billing_id);
    }

    public function clearBillingId()
    {
        unset($this->billing_id);
    }

    /**
     * Billing id to attribute this impression to. The value must be in the
     * set of billing ids for this slot that were sent in the
     * BidRequest.AdSlot.matching_ad_data.billing_id. This must always be set
     * if the BidRequest has more than one
     * BidRequest.AdSlot.matching_ad_data.billing_id or if the bidder has
     * active child seats.
     *
     * Generated from protobuf field <code>optional int64 billing_id = 4;</code>
     * @param int|string $var
     * @return $this
     */
    public function setBillingId($var)
    {
        GPBUtil::checkInt64($var);
        $this->billing_id = $var;

        return $this;
    }

    /**
     * The deal id that you want this bid to participate in. Leave unset
     * or set it to "1" if a deal is available but you want to
     * ignore the deal and participate in the open auction.
     *
     * Generated from protobuf field <code>optional int64 deal_id = 5;</code>
     * @return int|string
     */
    public function getDealId()
    {
        return isset($this->deal_id) ? $this->deal_id : 0;
    }

    public function hasDealId()
    {
        return isset($this->deal_id);
    }

    public function clearDealId()
    {
        unset($this->deal_id);
    }

    /**
     * The deal id that you want this bid to participate in. Leave unset
     * or set it to "1" if a deal is available but you want to
     * ignore the deal and participate in the open auction.
     *
     * Generated from protobuf field <code>optional int64 deal_id = 5;</code>
     * @param int|string $var
     * @return $this
     */
    public function setDealId($var)
    {
        GPBUtil::checkInt64($var);
        $this->deal_id = $var;

        return $this;
    }

    /**
     * For exchange bidders (third party exchanges doing real-time bidding on
     * DFP), the deal id from the exchange's namespace that is associated with
     * this bid and reported to publishers. Leave unset if there is no
     * associated deal. This is arbitrary UTF8 text and must be at most 64
     * bytes.
     *
     * Generated from protobuf field <code>optional string exchange_deal_id = 6;</code>
     * @return string
     */
    public function getExchangeDealId()
    {
        return isset($this->exchange_deal_id) ? $this->exchange_deal_id : '';
    }

    public function hasExchangeDealId()
    {
        return isset($this->exchange_deal_id);
    }

    public function clearExchangeDealId()
    {
        unset($this->exchange_deal_id);
    }

    /**
     * For exchange bidders (third party exchanges doing real-time bidding on
     * DFP), the deal id from the exchange's namespace that is associated with
     * this bid and reported to publishers. Leave unset if there is no
     * associated deal. This is arbitrary UTF8 text and must be at most 64
     * bytes.
     *
     * Generated from protobuf field <code>optional string exchange_deal_id = 6;</code>
     * @param string $var
     * @return $this
     */
    public function setExchangeDealId($var)
    {
        GPBUtil::checkString($var, True);
        $this->exchange_deal_id = $var;

        return $this;
    }

    /**
     *[default = OPEN_AUCTION];
     *
     * Generated from protobuf field <code>optional .BidResponse.Ad.AdSlot.ExchangeDealType exchange_deal_type = 7;</code>
     * @return int
     */
    public function getExchangeDealType()
    {
        return isset($this->exchange_deal_type) ? $this->exchange_deal_type : 0;
    }

    public function hasExchangeDealType()
    {
        return isset($this->exchange_deal_type);
    }

    public function clearExchangeDealType()
    {
        unset($this->exchange_deal_type);
    }

    /**
     *[default = OPEN_AUCTION];
     *
     * Generated from protobuf field <code>optional .BidResponse.Ad.AdSlot.ExchangeDealType exchange_deal_type = 7;</code>
     * @param int $var
     * @return $this
     */
    public function setExchangeDealType($var)
    {
        GPBUtil::checkEnum($var, \BidResponse\Ad\AdSlot\ExchangeDealType::class);
        $this->exchange_deal_type = $var;

        return $this;
    }

    /**
     * The seat ID in the bidder's namespace representing the seat on whose
     * behalf this bid was made.
     *
     * Generated from protobuf field <code>optional string seat_id = 25;</code>
     * @return string
     */
    public function getSeatId()
    {
        return isset($this->seat_id) ? $this->seat_id : '';
    }

    public function hasSeatId()
    {
        return isset($this->seat_id);
    }

    public function clearSeatId()
    {
        unset($this->seat_id);
    }

    /**
     * The seat ID in the bidder's namespace representing the seat on whose
     * behalf this bid was made.
     *
     * Generated from protobuf field <code>optional string seat_id = 25;</code>
     * @param string $var
     * @return $this
     */
    public function setSeatId($var)
    {
        GPBUtil::checkString($var, True);
        $this->seat_id = $var;

        return $this;
    }

    /**
     * Buyer declared ID which will be used to break down spend and invalid
     * traffic metrics in IVT transparency reporting in Query Tool. Note that
     * IDs with fewer than 1000 impressions will not be used to break down
     * metrics. IDs longer than 64 bytes will be ignored.
     *
     * Generated from protobuf field <code>optional string buyer_reporting_id = 8;</code>
     * @return string
     */
    public function getBuyerReportingId()
    {
        return isset($this->buyer_reporting_id) ? $this->buyer_reporting_id : '';
    }

    public function hasBuyerReportingId()
    {
        return isset($this->buyer_reporting_id);
    }

    public function clearBuyerReportingId()
    {
        unset($this->buyer_reporting_id);
    }

    /**
     * Buyer declared ID which will be used to break down spend and invalid
     * traffic metrics in IVT transparency reporting in Query Tool. Note that
     * IDs with fewer than 1000 impressions will not be used to break down
     * metrics. IDs longer than 64 bytes will be ignored.
     *
     * Generated from protobuf field <code>optional string buyer_reporting_id = 8;</code>
     * @param string $var
     * @return $this
     */
    public function setBuyerReportingId($var)
    {
        GPBUtil::checkString($var, True);
        $this->buyer_reporting_id = $var;

        return $this;
    }

    /**
     * Token used to identify end third party buyer information if an
     * exchange as an open bidder is an intermediary. This is obtained from
     * the third party buyer and must be passed to Google unaltered in the bid
     * response.
     *
     * Generated from protobuf field <code>optional string third_party_buyer_token = 12;</code>
     * @return string
     */
    public function getThirdPartyBuyerToken()
    {
        return isset($this->third_party_buyer_token) ? $this->third_party_buyer_token : '';
    }

    public function hasThirdPartyBuyerToken()
    {
        return isset($this->third_party_buyer_token);
    }

    public function clearThirdPartyBuyerToken()
    {
        unset($this->third_party_buyer_token);
    }

    /**
     * Token used to identify end third party buyer information if an
     * exchange as an open bidder is an intermediary. This is obtained from
     * the third party buyer and must be passed to Google unaltered in the bid
     * response.
     *
     * Generated from protobuf field <code>optional string third_party_buyer_token = 12;</code>
     * @param string $var
     * @return $this
     */
    public function setThirdPartyBuyerToken($var)
    {
        GPBUtil::checkString($var, True);
        $this->third_party_buyer_token = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>repeated .BidResponse.Ad.AdSlot.FrequencyCap frequency_cap = 16;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getFrequencyCap()
    {
        return $this->frequency_cap;
    }

    /**
     * Generated from protobuf field <code>repeated .BidResponse.Ad.AdSlot.FrequencyCap frequency_cap = 16;</code>
     * @param array<\BidResponse\Ad\AdSlot\FrequencyCap>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setFrequencyCap($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \BidResponse\Ad\AdSlot\FrequencyCap::class);
        $this->frequency_cap = $arr;

        return $this;
    }

    /**
     * Indicates that the bid is only eligible
     * for a specific position within the pod.
     *
     * Generated from protobuf field <code>optional .BidResponse.Ad.AdSlot.PodPosition position_in_pod = 22;</code>
     * @return int
     */
    public function getPositionInPod()
    {
        return isset($this->position_in_pod) ? $this->position_in_pod : 0;
    }

    public function hasPositionInPod()
    {
        return isset($this->position_in_pod);
    }

    public function clearPositionInPod()
    {
        unset($this->position_in_pod);
    }

    /**
     * Indicates that the bid is only eligible
     * for a specific position within the pod.
     *
     * Generated from protobuf field <code>optional .BidResponse.Ad.AdSlot.PodPosition position_in_pod = 22;</code>
     * @param int $var
     * @return $this
     */
    public function setPositionInPod($var)
    {
        GPBUtil::checkEnum($var, \BidResponse\Ad\AdSlot\PodPosition::class);
        $this->position_in_pod = $var;

        return $this;
    }

    /**
     * All bids with the same bid_group_id will be won or lost as a group.
     * Bids must have a non-empty bid_group_id to allow an ad to be played
     * as part of a pod.
     * This field is currently only supported for rewarded video pods
     * requests. If an ad is submitted on multiple positional bids
     * represented by AdSlot messages, each bid (AdSlot message)
     * must have a different bid_group_id.
     * For example, if a bidder wants to bid ad_1 for first position
     * and last position in the pod and ad_2 for any position and
     * want to ensure either both win at the same time or neither of those
     * wins, bidder needs to submit:
     * ad {
     *   buyer_creative_id: "ad_1",
     *   adslot {
     *     position_in_pod: POD_POSITION_FIRST,
     *     bid_group_id: "group1"
     *   },
     *   adslot {
     *     position_in_pod: POD_POSITION_LAST,
     *     bid_group_id: "group2"
     *   }
     * },
     * ad {
     *   buyer_creative_id: "ad_2",
     *   adslot {
     *     position_in_pod: POD_POSITION_ANY,
     *     bid_group_id: "group1"
     *   },
     *   adslot {
     *     position_in_pod: POD_POSITION_ANY,
     *     bid_group_id: "group2"
     *   }
     * }
     *
     * Generated from protobuf field <code>optional string bid_group_id = 23;</code>
     * @return string
     */
    public function getBidGroupId()
    {
        return isset($this->bid_group_id) ? $this->bid_group_id : '';
    }

    public function hasBidGroupId()
    {
        return isset($this->bid_group_id);
    }

    public function clearBidGroupId()
    {
        unset($this->bid_group_id);
    }

    /**
     * All bids with the same bid_group_id will be won or lost as a group.
     * Bids must have a non-empty bid_group_id to allow an ad to be played
     * as part of a pod.
     * This field is currently only supported for rewarded video pods
     * requests. If an ad is submitted on multiple positional bids
     * represented by AdSlot messages, each bid (AdSlot message)
     * must have a different bid_group_id.
     * For example, if a bidder wants to bid ad_1 for first position
     * and last position in the pod and ad_2 for any position and
     * want to ensure either both win at the same time or neither of those
     * wins, bidder needs to submit:
     * ad {
     *   buyer_creative_id: "ad_1",
     *   adslot {
     *     position_in_pod: POD_POSITION_FIRST,
     *     bid_group_id: "group1"
     *   },
     *   adslot {
     *     position_in_pod: POD_POSITION_LAST,
     *     bid_group_id: "group2"
     *   }
     * },
     * ad {
     *   buyer_creative_id: "ad_2",
     *   adslot {
     *     position_in_pod: POD_POSITION_ANY,
     *     bid_group_id: "group1"
     *   },
     *   adslot {
     *     position_in_pod: POD_POSITION_ANY,
     *     bid_group_id: "group2"
     *   }
     * }
     *
     * Generated from protobuf field <code>optional string bid_group_id = 23;</code>
     * @param string $var
     * @return $this
     */
    public function setBidGroupId($var)
    {
        GPBUtil::checkString($var, True);
        $this->bid_group_id = $var;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(AdSlot::class, \BidResponse_Ad_AdSlot::class);

