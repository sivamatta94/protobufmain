<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: realtime-bidding.proto

namespace BidResponse\Ad\AdSlot\FrequencyCap;

use UnexpectedValueException;

/**
 * The time units for which frequency caps can be enforced.
 *
 * Protobuf type <code>BidResponse.Ad.AdSlot.FrequencyCap.TimeUnit</code>
 */
class TimeUnit
{
    /**
     * Generated from protobuf enum <code>UNKNOWN_TIME_UNIT = 0;</code>
     */
    const UNKNOWN_TIME_UNIT = 0;
    /**
     * Generated from protobuf enum <code>MINUTE = 1;</code>
     */
    const MINUTE = 1;
    /**
     * Generated from protobuf enum <code>DAY = 2;</code>
     */
    const DAY = 2;
    /**
     * Generated from protobuf enum <code>WEEK = 3;</code>
     */
    const WEEK = 3;
    /**
     * Generated from protobuf enum <code>MONTH = 4;</code>
     */
    const MONTH = 4;
    /**
     * When INDEFINITE is used, time_range will be ignored. INDEFINITE
     * means the frequency cap will be applied for a long period of time,
     * (longer than a month) but not necessarily forever.
     *
     * Generated from protobuf enum <code>INDEFINITE = 5;</code>
     */
    const INDEFINITE = 5;

    private static $valueToName = [
        self::UNKNOWN_TIME_UNIT => 'UNKNOWN_TIME_UNIT',
        self::MINUTE => 'MINUTE',
        self::DAY => 'DAY',
        self::WEEK => 'WEEK',
        self::MONTH => 'MONTH',
        self::INDEFINITE => 'INDEFINITE',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(TimeUnit::class, \BidResponse_Ad_AdSlot_FrequencyCap_TimeUnit::class);

