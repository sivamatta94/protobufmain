<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: realtime-bidding.proto

namespace BidResponse\Ad\AdSlot;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Experimental feature; may be subject to change. See
 * https://support.google.com/authorizedbuyers/answer/10890762 for more
 * information.
 * Specifies frequency capping to be applied to the bid. Impressions for
 * each user are capped at the level specified by frequency_cap_id. A bid
 * will not participate in the auction if an additional impression for the
 * user would violate any of the specified caps. Multiple frequency caps
 * can be specified for the same frequency_cap_id.
 * A bid is filtered before the auction if the frequency cap is malformed.
 * Instances where the cap is malformed include:
 *  - frequency_cap_id is empty or is very long
 *  - max_mpressions or time_range are non-positive
 *  - there are a large number of frequency caps for a single bid
 *  - time_unit is not specified
 * Note that if a subsequent bid with the same frequency_cap_id uses a
 * different duration (represented by time_unit and time_range) then
 * impressions counted against the old frequency cap will not count
 * against the new one, and the impressions counted against the new
 * frequency cap with a different time_unit and time_range will not count
 * against the old frequency cap..
 *
 * Generated from protobuf message <code>BidResponse.Ad.AdSlot.FrequencyCap</code>
 */
class FrequencyCap extends \Google\Protobuf\Internal\Message
{
    /**
     * An ID that can represent a bidder's use-case for frequency capping.
     * For example, it could represent their campaign, ad, line item, or
     * some other entity. It should not contain any user-specific
     * information or identifiers and should not be longer than 64
     * characters.
     *
     * Generated from protobuf field <code>optional string frequency_cap_id = 1;</code>
     */
    protected $frequency_cap_id = null;
    /**
     * The unit of time used to specify the time window for which a
     * frequency cap applies.
     *
     * Generated from protobuf field <code>optional .BidResponse.Ad.AdSlot.FrequencyCap.TimeUnit time_unit = 2;</code>
     */
    protected $time_unit = null;
    /**
     * The length of the time window, in units specified by time_unit, for
     * which the frequency cap applies. For instance, if time_unit=WEEK and
     * time_range=3, then capping is applied for a three week period. If the
     * time_unit=INDEFINITE, this will be ignored.
     *
     * Generated from protobuf field <code>optional int32 time_range = 3;</code>
     */
    protected $time_range = null;
    /**
     * The maximum number of impressions allowed to be shown to a user for
     * the provided frequency_cap_id within the time window described by
     * time_unit and time_range.
     *
     * Generated from protobuf field <code>optional int32 max_impressions = 4;</code>
     */
    protected $max_impressions = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $frequency_cap_id
     *           An ID that can represent a bidder's use-case for frequency capping.
     *           For example, it could represent their campaign, ad, line item, or
     *           some other entity. It should not contain any user-specific
     *           information or identifiers and should not be longer than 64
     *           characters.
     *     @type int $time_unit
     *           The unit of time used to specify the time window for which a
     *           frequency cap applies.
     *     @type int $time_range
     *           The length of the time window, in units specified by time_unit, for
     *           which the frequency cap applies. For instance, if time_unit=WEEK and
     *           time_range=3, then capping is applied for a three week period. If the
     *           time_unit=INDEFINITE, this will be ignored.
     *     @type int $max_impressions
     *           The maximum number of impressions allowed to be shown to a user for
     *           the provided frequency_cap_id within the time window described by
     *           time_unit and time_range.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\RealtimeBidding::initOnce();
        parent::__construct($data);
    }

    /**
     * An ID that can represent a bidder's use-case for frequency capping.
     * For example, it could represent their campaign, ad, line item, or
     * some other entity. It should not contain any user-specific
     * information or identifiers and should not be longer than 64
     * characters.
     *
     * Generated from protobuf field <code>optional string frequency_cap_id = 1;</code>
     * @return string
     */
    public function getFrequencyCapId()
    {
        return isset($this->frequency_cap_id) ? $this->frequency_cap_id : '';
    }

    public function hasFrequencyCapId()
    {
        return isset($this->frequency_cap_id);
    }

    public function clearFrequencyCapId()
    {
        unset($this->frequency_cap_id);
    }

    /**
     * An ID that can represent a bidder's use-case for frequency capping.
     * For example, it could represent their campaign, ad, line item, or
     * some other entity. It should not contain any user-specific
     * information or identifiers and should not be longer than 64
     * characters.
     *
     * Generated from protobuf field <code>optional string frequency_cap_id = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setFrequencyCapId($var)
    {
        GPBUtil::checkString($var, True);
        $this->frequency_cap_id = $var;

        return $this;
    }

    /**
     * The unit of time used to specify the time window for which a
     * frequency cap applies.
     *
     * Generated from protobuf field <code>optional .BidResponse.Ad.AdSlot.FrequencyCap.TimeUnit time_unit = 2;</code>
     * @return int
     */
    public function getTimeUnit()
    {
        return isset($this->time_unit) ? $this->time_unit : 0;
    }

    public function hasTimeUnit()
    {
        return isset($this->time_unit);
    }

    public function clearTimeUnit()
    {
        unset($this->time_unit);
    }

    /**
     * The unit of time used to specify the time window for which a
     * frequency cap applies.
     *
     * Generated from protobuf field <code>optional .BidResponse.Ad.AdSlot.FrequencyCap.TimeUnit time_unit = 2;</code>
     * @param int $var
     * @return $this
     */
    public function setTimeUnit($var)
    {
        GPBUtil::checkEnum($var, \BidResponse\Ad\AdSlot\FrequencyCap\TimeUnit::class);
        $this->time_unit = $var;

        return $this;
    }

    /**
     * The length of the time window, in units specified by time_unit, for
     * which the frequency cap applies. For instance, if time_unit=WEEK and
     * time_range=3, then capping is applied for a three week period. If the
     * time_unit=INDEFINITE, this will be ignored.
     *
     * Generated from protobuf field <code>optional int32 time_range = 3;</code>
     * @return int
     */
    public function getTimeRange()
    {
        return isset($this->time_range) ? $this->time_range : 0;
    }

    public function hasTimeRange()
    {
        return isset($this->time_range);
    }

    public function clearTimeRange()
    {
        unset($this->time_range);
    }

    /**
     * The length of the time window, in units specified by time_unit, for
     * which the frequency cap applies. For instance, if time_unit=WEEK and
     * time_range=3, then capping is applied for a three week period. If the
     * time_unit=INDEFINITE, this will be ignored.
     *
     * Generated from protobuf field <code>optional int32 time_range = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setTimeRange($var)
    {
        GPBUtil::checkInt32($var);
        $this->time_range = $var;

        return $this;
    }

    /**
     * The maximum number of impressions allowed to be shown to a user for
     * the provided frequency_cap_id within the time window described by
     * time_unit and time_range.
     *
     * Generated from protobuf field <code>optional int32 max_impressions = 4;</code>
     * @return int
     */
    public function getMaxImpressions()
    {
        return isset($this->max_impressions) ? $this->max_impressions : 0;
    }

    public function hasMaxImpressions()
    {
        return isset($this->max_impressions);
    }

    public function clearMaxImpressions()
    {
        unset($this->max_impressions);
    }

    /**
     * The maximum number of impressions allowed to be shown to a user for
     * the provided frequency_cap_id within the time window described by
     * time_unit and time_range.
     *
     * Generated from protobuf field <code>optional int32 max_impressions = 4;</code>
     * @param int $var
     * @return $this
     */
    public function setMaxImpressions($var)
    {
        GPBUtil::checkInt32($var);
        $this->max_impressions = $var;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(FrequencyCap::class, \BidResponse_Ad_AdSlot_FrequencyCap::class);

