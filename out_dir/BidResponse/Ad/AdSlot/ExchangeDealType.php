<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: realtime-bidding.proto

namespace BidResponse\Ad\AdSlot;

use UnexpectedValueException;

/**
 * When exchange_deal_id is set, the type of deal. This is reported to
 * publishers and affects how the deal is treated in the auction.
 *
 * Protobuf type <code>BidResponse.Ad.AdSlot.ExchangeDealType</code>
 */
class ExchangeDealType
{
    /**
     * Generated from protobuf enum <code>OPEN_AUCTION = 0;</code>
     */
    const OPEN_AUCTION = 0;
    /**
     * Generated from protobuf enum <code>PRIVATE_AUCTION = 1;</code>
     */
    const PRIVATE_AUCTION = 1;
    /**
     * Generated from protobuf enum <code>PREFERRED_DEAL = 2;</code>
     */
    const PREFERRED_DEAL = 2;
    /**
     * Generated from protobuf enum <code>EXCHANGE_AUCTION_PACKAGE = 3;</code>
     */
    const EXCHANGE_AUCTION_PACKAGE = 3;

    private static $valueToName = [
        self::OPEN_AUCTION => 'OPEN_AUCTION',
        self::PRIVATE_AUCTION => 'PRIVATE_AUCTION',
        self::PREFERRED_DEAL => 'PREFERRED_DEAL',
        self::EXCHANGE_AUCTION_PACKAGE => 'EXCHANGE_AUCTION_PACKAGE',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(ExchangeDealType::class, \BidResponse_Ad_AdSlot_ExchangeDealType::class);

