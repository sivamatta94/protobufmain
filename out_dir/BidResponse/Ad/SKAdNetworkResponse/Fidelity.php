<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: realtime-bidding.proto

namespace BidResponse\Ad\SKAdNetworkResponse;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * SKAdNetwork API starting from version 2.2 supports multiple ad
 * presentation options specified by the `fidelity-type` parameter of the
 * SKAdNetwork signature. This holds parameters used to generate the
 * signature that would be different for each fidelity type supported.
 * For more info visit:
 * https://developer.apple.com/documentation/storekit/skadnetwork/signing_and_providing_ads
 *
 * Generated from protobuf message <code>BidResponse.Ad.SKAdNetworkResponse.Fidelity</code>
 */
class Fidelity extends \Google\Protobuf\Internal\Message
{
    /**
     * The fidelity type of the attribution to track.
     *
     * Generated from protobuf field <code>optional .SKAdNetworkFidelityType fidelity_type = 1;</code>
     */
    protected $fidelity_type = null;
    /**
     * A unique all-lowercase UUID generated by the advertiser to use for
     * generating the signature.
     *
     * Generated from protobuf field <code>optional string nonce = 2;</code>
     */
    protected $nonce = null;
    /**
     * Unix time in millis used at the time of signature generation.
     *
     * Generated from protobuf field <code>optional int64 timestamp = 3;</code>
     */
    protected $timestamp = null;
    /**
     * SKAdNetwork signature as specified by Apple.
     *
     * Generated from protobuf field <code>optional string signature = 4;</code>
     */
    protected $signature = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int $fidelity_type
     *           The fidelity type of the attribution to track.
     *     @type string $nonce
     *           A unique all-lowercase UUID generated by the advertiser to use for
     *           generating the signature.
     *     @type int|string $timestamp
     *           Unix time in millis used at the time of signature generation.
     *     @type string $signature
     *           SKAdNetwork signature as specified by Apple.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\RealtimeBidding::initOnce();
        parent::__construct($data);
    }

    /**
     * The fidelity type of the attribution to track.
     *
     * Generated from protobuf field <code>optional .SKAdNetworkFidelityType fidelity_type = 1;</code>
     * @return int
     */
    public function getFidelityType()
    {
        return isset($this->fidelity_type) ? $this->fidelity_type : 0;
    }

    public function hasFidelityType()
    {
        return isset($this->fidelity_type);
    }

    public function clearFidelityType()
    {
        unset($this->fidelity_type);
    }

    /**
     * The fidelity type of the attribution to track.
     *
     * Generated from protobuf field <code>optional .SKAdNetworkFidelityType fidelity_type = 1;</code>
     * @param int $var
     * @return $this
     */
    public function setFidelityType($var)
    {
        GPBUtil::checkEnum($var, \SKAdNetworkFidelityType::class);
        $this->fidelity_type = $var;

        return $this;
    }

    /**
     * A unique all-lowercase UUID generated by the advertiser to use for
     * generating the signature.
     *
     * Generated from protobuf field <code>optional string nonce = 2;</code>
     * @return string
     */
    public function getNonce()
    {
        return isset($this->nonce) ? $this->nonce : '';
    }

    public function hasNonce()
    {
        return isset($this->nonce);
    }

    public function clearNonce()
    {
        unset($this->nonce);
    }

    /**
     * A unique all-lowercase UUID generated by the advertiser to use for
     * generating the signature.
     *
     * Generated from protobuf field <code>optional string nonce = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setNonce($var)
    {
        GPBUtil::checkString($var, True);
        $this->nonce = $var;

        return $this;
    }

    /**
     * Unix time in millis used at the time of signature generation.
     *
     * Generated from protobuf field <code>optional int64 timestamp = 3;</code>
     * @return int|string
     */
    public function getTimestamp()
    {
        return isset($this->timestamp) ? $this->timestamp : 0;
    }

    public function hasTimestamp()
    {
        return isset($this->timestamp);
    }

    public function clearTimestamp()
    {
        unset($this->timestamp);
    }

    /**
     * Unix time in millis used at the time of signature generation.
     *
     * Generated from protobuf field <code>optional int64 timestamp = 3;</code>
     * @param int|string $var
     * @return $this
     */
    public function setTimestamp($var)
    {
        GPBUtil::checkInt64($var);
        $this->timestamp = $var;

        return $this;
    }

    /**
     * SKAdNetwork signature as specified by Apple.
     *
     * Generated from protobuf field <code>optional string signature = 4;</code>
     * @return string
     */
    public function getSignature()
    {
        return isset($this->signature) ? $this->signature : '';
    }

    public function hasSignature()
    {
        return isset($this->signature);
    }

    public function clearSignature()
    {
        unset($this->signature);
    }

    /**
     * SKAdNetwork signature as specified by Apple.
     *
     * Generated from protobuf field <code>optional string signature = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setSignature($var)
    {
        GPBUtil::checkString($var, True);
        $this->signature = $var;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Fidelity::class, \BidResponse_Ad_SKAdNetworkResponse_Fidelity::class);

