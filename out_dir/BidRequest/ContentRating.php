<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: realtime-bidding.proto

namespace BidRequest;

use UnexpectedValueException;

/**
 * The rating of the content. See
 * https://support.google.com/admanager/answer/12451124#content-rating for
 * details.
 *
 * Protobuf type <code>BidRequest.ContentRating</code>
 */
class ContentRating
{
    /**
     * Generated from protobuf enum <code>RATING_UNKNOWN = 0;</code>
     */
    const RATING_UNKNOWN = 0;
    /**
     * Content suitable for general audiences.
     *
     * Generated from protobuf enum <code>GENERAL_AUDIENCES = 1;</code>
     */
    const GENERAL_AUDIENCES = 1;
    /**
     * Content suitable for most audiences with parental guidance.
     *
     * Generated from protobuf enum <code>PARENTAL_GUIDANCE = 2;</code>
     */
    const PARENTAL_GUIDANCE = 2;
    /**
     * Content suitable for teen and older audiences.
     *
     * Generated from protobuf enum <code>TEEN = 3;</code>
     */
    const TEEN = 3;
    /**
     * Content suitable only for mature audiences.
     *
     * Generated from protobuf enum <code>MATURE_AUDIENCES = 4;</code>
     */
    const MATURE_AUDIENCES = 4;

    private static $valueToName = [
        self::RATING_UNKNOWN => 'RATING_UNKNOWN',
        self::GENERAL_AUDIENCES => 'GENERAL_AUDIENCES',
        self::PARENTAL_GUIDANCE => 'PARENTAL_GUIDANCE',
        self::TEEN => 'TEEN',
        self::MATURE_AUDIENCES => 'MATURE_AUDIENCES',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(ContentRating::class, \BidRequest_ContentRating::class);

