<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: realtime-bidding.proto

namespace BidRequest\AdSlot;

use UnexpectedValueException;

/**
 * Possible requirement types for AMP ads.
 *
 * Protobuf type <code>BidRequest.AdSlot.AmpAdRequirementType</code>
 */
class AmpAdRequirementType
{
    /**
     * AMP ad requirements unknown.
     *
     * Generated from protobuf enum <code>UNKNOWN_AMP_AD_REQUIREMENT_TYPE = 0;</code>
     */
    const UNKNOWN_AMP_AD_REQUIREMENT_TYPE = 0;
    /**
     * AMP ads are not allowed.
     *
     * Generated from protobuf enum <code>AMP_AD_NOT_ALLOWED = 1;</code>
     */
    const AMP_AD_NOT_ALLOWED = 1;
    /**
     * Either AMP ads or non-AMP ads are allowed;
     * AMP ads are not early rendered.
     *
     * Generated from protobuf enum <code>AMP_AD_ALLOWED_AND_NOT_EARLY_RENDERED = 2;</code>
     */
    const AMP_AD_ALLOWED_AND_NOT_EARLY_RENDERED = 2;
    /**
     * Either AMP ads or non-AMP ads are allowed;
     * AMP ads are early rendered.
     *
     * Generated from protobuf enum <code>AMP_AD_ALLOWED_AND_EARLY_RENDERED = 3;</code>
     */
    const AMP_AD_ALLOWED_AND_EARLY_RENDERED = 3;
    /**
     * AMP ads are required.
     * Ads that are non-AMP may be rejected by the publisher.
     *
     * Generated from protobuf enum <code>AMP_AD_REQUIRED = 4;</code>
     */
    const AMP_AD_REQUIRED = 4;

    private static $valueToName = [
        self::UNKNOWN_AMP_AD_REQUIREMENT_TYPE => 'UNKNOWN_AMP_AD_REQUIREMENT_TYPE',
        self::AMP_AD_NOT_ALLOWED => 'AMP_AD_NOT_ALLOWED',
        self::AMP_AD_ALLOWED_AND_NOT_EARLY_RENDERED => 'AMP_AD_ALLOWED_AND_NOT_EARLY_RENDERED',
        self::AMP_AD_ALLOWED_AND_EARLY_RENDERED => 'AMP_AD_ALLOWED_AND_EARLY_RENDERED',
        self::AMP_AD_REQUIRED => 'AMP_AD_REQUIRED',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(AmpAdRequirementType::class, \BidRequest_AdSlot_AmpAdRequirementType::class);

