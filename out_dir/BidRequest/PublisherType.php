<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: realtime-bidding.proto

namespace BidRequest;

use UnexpectedValueException;

/**
 * Publisher type of the inventory where the ad will be shown. For a given
 * request, publisher inventory can be either owned and operated (O&O),
 * represented by the publisher, or of unknown status.
 *
 * Protobuf type <code>BidRequest.PublisherType</code>
 */
class PublisherType
{
    /**
     * Generated from protobuf enum <code>UNKNOWN_PUBLISHER_TYPE = 0;</code>
     */
    const UNKNOWN_PUBLISHER_TYPE = 0;
    /**
     * Generated from protobuf enum <code>PUBLISHER_OWNED_AND_OPERATED = 1;</code>
     */
    const PUBLISHER_OWNED_AND_OPERATED = 1;
    /**
     * Generated from protobuf enum <code>PUBLISHER_REPRESENTED = 2;</code>
     */
    const PUBLISHER_REPRESENTED = 2;

    private static $valueToName = [
        self::UNKNOWN_PUBLISHER_TYPE => 'UNKNOWN_PUBLISHER_TYPE',
        self::PUBLISHER_OWNED_AND_OPERATED => 'PUBLISHER_OWNED_AND_OPERATED',
        self::PUBLISHER_REPRESENTED => 'PUBLISHER_REPRESENTED',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(PublisherType::class, \BidRequest_PublisherType::class);

