<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: realtime-bidding.proto

namespace BidRequest;

use UnexpectedValueException;

/**
 * Experimental feature; may be subject to change. See
 * https://support.google.com/authorizedbuyers/answer/10890762 for more
 * information.
 * Describes the scope of frequency cap enforcement available for this
 * request. Frequency caps to be enforced for a bid can be specified in the
 * BidResponse.ad.adslot.frequency_cap field.
 *
 * Protobuf type <code>BidRequest.FrequencyCappingScope</code>
 */
class FrequencyCappingScope
{
    /**
     * Default value which should not be used, or which can indicate that
     * frequency cap scope could not be reliably determined.
     *
     * Generated from protobuf enum <code>FREQUENCY_CAPPING_SCOPE_UNKNOWN = 0;</code>
     */
    const FREQUENCY_CAPPING_SCOPE_UNKNOWN = 0;
    /**
     * Frequency capping based on bid response specifications is not available
     * for this request. A frequency-capped bid for a bid request with no
     * frequency cap availability will be filtered prior to the auction.
     *
     * Generated from protobuf enum <code>FREQUENCY_CAPPING_SCOPE_NONE = 1;</code>
     */
    const FREQUENCY_CAPPING_SCOPE_NONE = 1;
    /**
     * Frequency capping enforcement is available across multiple sites within
     * the same browser.
     *
     * Generated from protobuf enum <code>FREQUENCY_CAPPING_SCOPE_BROWSER = 2;</code>
     */
    const FREQUENCY_CAPPING_SCOPE_BROWSER = 2;
    /**
     * Frequency capping enforcement is available across multiple apps on the
     * device, excluding browsers.
     *
     * Generated from protobuf enum <code>FREQUENCY_CAPPING_SCOPE_DEVICE = 3;</code>
     */
    const FREQUENCY_CAPPING_SCOPE_DEVICE = 3;
    /**
     * Frequency capping enforcement is available within a single app.
     *
     * Generated from protobuf enum <code>FREQUENCY_CAPPING_SCOPE_APP = 4;</code>
     */
    const FREQUENCY_CAPPING_SCOPE_APP = 4;
    /**
     * Frequency capping enforcement is available within a single site.
     *
     * Generated from protobuf enum <code>FREQUENCY_CAPPING_SCOPE_SITE = 5;</code>
     */
    const FREQUENCY_CAPPING_SCOPE_SITE = 5;

    private static $valueToName = [
        self::FREQUENCY_CAPPING_SCOPE_UNKNOWN => 'FREQUENCY_CAPPING_SCOPE_UNKNOWN',
        self::FREQUENCY_CAPPING_SCOPE_NONE => 'FREQUENCY_CAPPING_SCOPE_NONE',
        self::FREQUENCY_CAPPING_SCOPE_BROWSER => 'FREQUENCY_CAPPING_SCOPE_BROWSER',
        self::FREQUENCY_CAPPING_SCOPE_DEVICE => 'FREQUENCY_CAPPING_SCOPE_DEVICE',
        self::FREQUENCY_CAPPING_SCOPE_APP => 'FREQUENCY_CAPPING_SCOPE_APP',
        self::FREQUENCY_CAPPING_SCOPE_SITE => 'FREQUENCY_CAPPING_SCOPE_SITE',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(FrequencyCappingScope::class, \BidRequest_FrequencyCappingScope::class);

