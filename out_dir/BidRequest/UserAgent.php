<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: realtime-bidding.proto

namespace BidRequest;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Structured user agent information, which can be used when a client
 * supports User-Agent Client Hints: https://wicg.github.io/ua-client-hints/
 * Note: When available, fields are sourced from Client Hints HTTP headers
 * or equivalent JavaScript accessors from the NavigatorUAData interface.
 * For agents that have no support for User-Agent Client Hints, an exchange
 * can also extract information from the parsed User-Agent header, so this
 * object can always be used as the source of the user agent information.
 *
 * Generated from protobuf message <code>BidRequest.UserAgent</code>
 */
class UserAgent extends \Google\Protobuf\Internal\Message
{
    /**
     * Each BrandVersion object identifies a browser or similar software
     * component. Exchanges should send brands and versions derived from
     * the Sec-CH-UA-Full-Version-List header.
     *
     * Generated from protobuf field <code>repeated .BidRequest.UserAgent.BrandVersion browsers = 8;</code>
     */
    private $browsers;
    /**
     * Identifies the user agent's execution platform / OS. Exchanges should
     * send a brand derived from the Sec-CH-UA-Platform header, and version
     * derived from the Sec-CH-UAPlatform-Version header.
     *
     * Generated from protobuf field <code>optional .BidRequest.UserAgent.BrandVersion platform = 2;</code>
     */
    protected $platform = null;
    /**
     * True if the agent prefers a "mobile" version of the content if
     * available, meaning optimized for small screens or touch input. False
     * if the agent prefers the "desktop" or "full" content. Exchanges should
     * derive this value from the Sec-CH-UAMobile header.
     *
     * Generated from protobuf field <code>optional bool mobile = 3;</code>
     */
    protected $mobile = null;
    /**
     * Device's major binary architecture, for example, "x86" or "arm".
     * Exchanges should retrieve this value from the Sec-CH-UA-Arch header.
     *
     * Generated from protobuf field <code>optional string architecture = 4;</code>
     */
    protected $architecture = null;
    /**
     * Device's bitness, for example, "64" for 64-bit architecture. Exchanges
     * should retrieve this value from the Sec-CH-UA-Bitness header.
     *
     * Generated from protobuf field <code>optional string bitness = 9;</code>
     */
    protected $bitness = null;
    /**
     * Device model. Exchanges should retrieve this value from the
     * Sec-CH-UAModel header.
     *
     * Generated from protobuf field <code>optional string model = 5;</code>
     */
    protected $model = null;
    /**
     * The source of data for the User Agent information.
     *
     * Generated from protobuf field <code>optional .BidRequest.UserAgent.Source source = 10;</code>
     */
    protected $source = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type array<\BidRequest\UserAgent\BrandVersion>|\Google\Protobuf\Internal\RepeatedField $browsers
     *           Each BrandVersion object identifies a browser or similar software
     *           component. Exchanges should send brands and versions derived from
     *           the Sec-CH-UA-Full-Version-List header.
     *     @type \BidRequest\UserAgent\BrandVersion $platform
     *           Identifies the user agent's execution platform / OS. Exchanges should
     *           send a brand derived from the Sec-CH-UA-Platform header, and version
     *           derived from the Sec-CH-UAPlatform-Version header.
     *     @type bool $mobile
     *           True if the agent prefers a "mobile" version of the content if
     *           available, meaning optimized for small screens or touch input. False
     *           if the agent prefers the "desktop" or "full" content. Exchanges should
     *           derive this value from the Sec-CH-UAMobile header.
     *     @type string $architecture
     *           Device's major binary architecture, for example, "x86" or "arm".
     *           Exchanges should retrieve this value from the Sec-CH-UA-Arch header.
     *     @type string $bitness
     *           Device's bitness, for example, "64" for 64-bit architecture. Exchanges
     *           should retrieve this value from the Sec-CH-UA-Bitness header.
     *     @type string $model
     *           Device model. Exchanges should retrieve this value from the
     *           Sec-CH-UAModel header.
     *     @type int $source
     *           The source of data for the User Agent information.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\RealtimeBidding::initOnce();
        parent::__construct($data);
    }

    /**
     * Each BrandVersion object identifies a browser or similar software
     * component. Exchanges should send brands and versions derived from
     * the Sec-CH-UA-Full-Version-List header.
     *
     * Generated from protobuf field <code>repeated .BidRequest.UserAgent.BrandVersion browsers = 8;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getBrowsers()
    {
        return $this->browsers;
    }

    /**
     * Each BrandVersion object identifies a browser or similar software
     * component. Exchanges should send brands and versions derived from
     * the Sec-CH-UA-Full-Version-List header.
     *
     * Generated from protobuf field <code>repeated .BidRequest.UserAgent.BrandVersion browsers = 8;</code>
     * @param array<\BidRequest\UserAgent\BrandVersion>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setBrowsers($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \BidRequest\UserAgent\BrandVersion::class);
        $this->browsers = $arr;

        return $this;
    }

    /**
     * Identifies the user agent's execution platform / OS. Exchanges should
     * send a brand derived from the Sec-CH-UA-Platform header, and version
     * derived from the Sec-CH-UAPlatform-Version header.
     *
     * Generated from protobuf field <code>optional .BidRequest.UserAgent.BrandVersion platform = 2;</code>
     * @return \BidRequest\UserAgent\BrandVersion|null
     */
    public function getPlatform()
    {
        return $this->platform;
    }

    public function hasPlatform()
    {
        return isset($this->platform);
    }

    public function clearPlatform()
    {
        unset($this->platform);
    }

    /**
     * Identifies the user agent's execution platform / OS. Exchanges should
     * send a brand derived from the Sec-CH-UA-Platform header, and version
     * derived from the Sec-CH-UAPlatform-Version header.
     *
     * Generated from protobuf field <code>optional .BidRequest.UserAgent.BrandVersion platform = 2;</code>
     * @param \BidRequest\UserAgent\BrandVersion $var
     * @return $this
     */
    public function setPlatform($var)
    {
        GPBUtil::checkMessage($var, \BidRequest\UserAgent\BrandVersion::class);
        $this->platform = $var;

        return $this;
    }

    /**
     * True if the agent prefers a "mobile" version of the content if
     * available, meaning optimized for small screens or touch input. False
     * if the agent prefers the "desktop" or "full" content. Exchanges should
     * derive this value from the Sec-CH-UAMobile header.
     *
     * Generated from protobuf field <code>optional bool mobile = 3;</code>
     * @return bool
     */
    public function getMobile()
    {
        return isset($this->mobile) ? $this->mobile : false;
    }

    public function hasMobile()
    {
        return isset($this->mobile);
    }

    public function clearMobile()
    {
        unset($this->mobile);
    }

    /**
     * True if the agent prefers a "mobile" version of the content if
     * available, meaning optimized for small screens or touch input. False
     * if the agent prefers the "desktop" or "full" content. Exchanges should
     * derive this value from the Sec-CH-UAMobile header.
     *
     * Generated from protobuf field <code>optional bool mobile = 3;</code>
     * @param bool $var
     * @return $this
     */
    public function setMobile($var)
    {
        GPBUtil::checkBool($var);
        $this->mobile = $var;

        return $this;
    }

    /**
     * Device's major binary architecture, for example, "x86" or "arm".
     * Exchanges should retrieve this value from the Sec-CH-UA-Arch header.
     *
     * Generated from protobuf field <code>optional string architecture = 4;</code>
     * @return string
     */
    public function getArchitecture()
    {
        return isset($this->architecture) ? $this->architecture : '';
    }

    public function hasArchitecture()
    {
        return isset($this->architecture);
    }

    public function clearArchitecture()
    {
        unset($this->architecture);
    }

    /**
     * Device's major binary architecture, for example, "x86" or "arm".
     * Exchanges should retrieve this value from the Sec-CH-UA-Arch header.
     *
     * Generated from protobuf field <code>optional string architecture = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setArchitecture($var)
    {
        GPBUtil::checkString($var, True);
        $this->architecture = $var;

        return $this;
    }

    /**
     * Device's bitness, for example, "64" for 64-bit architecture. Exchanges
     * should retrieve this value from the Sec-CH-UA-Bitness header.
     *
     * Generated from protobuf field <code>optional string bitness = 9;</code>
     * @return string
     */
    public function getBitness()
    {
        return isset($this->bitness) ? $this->bitness : '';
    }

    public function hasBitness()
    {
        return isset($this->bitness);
    }

    public function clearBitness()
    {
        unset($this->bitness);
    }

    /**
     * Device's bitness, for example, "64" for 64-bit architecture. Exchanges
     * should retrieve this value from the Sec-CH-UA-Bitness header.
     *
     * Generated from protobuf field <code>optional string bitness = 9;</code>
     * @param string $var
     * @return $this
     */
    public function setBitness($var)
    {
        GPBUtil::checkString($var, True);
        $this->bitness = $var;

        return $this;
    }

    /**
     * Device model. Exchanges should retrieve this value from the
     * Sec-CH-UAModel header.
     *
     * Generated from protobuf field <code>optional string model = 5;</code>
     * @return string
     */
    public function getModel()
    {
        return isset($this->model) ? $this->model : '';
    }

    public function hasModel()
    {
        return isset($this->model);
    }

    public function clearModel()
    {
        unset($this->model);
    }

    /**
     * Device model. Exchanges should retrieve this value from the
     * Sec-CH-UAModel header.
     *
     * Generated from protobuf field <code>optional string model = 5;</code>
     * @param string $var
     * @return $this
     */
    public function setModel($var)
    {
        GPBUtil::checkString($var, True);
        $this->model = $var;

        return $this;
    }

    /**
     * The source of data for the User Agent information.
     *
     * Generated from protobuf field <code>optional .BidRequest.UserAgent.Source source = 10;</code>
     * @return int
     */
    public function getSource()
    {
        return isset($this->source) ? $this->source : 0;
    }

    public function hasSource()
    {
        return isset($this->source);
    }

    public function clearSource()
    {
        unset($this->source);
    }

    /**
     * The source of data for the User Agent information.
     *
     * Generated from protobuf field <code>optional .BidRequest.UserAgent.Source source = 10;</code>
     * @param int $var
     * @return $this
     */
    public function setSource($var)
    {
        GPBUtil::checkEnum($var, \BidRequest\UserAgent\Source::class);
        $this->source = $var;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(UserAgent::class, \BidRequest_UserAgent::class);

