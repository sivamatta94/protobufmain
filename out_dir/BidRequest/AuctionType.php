<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: realtime-bidding.proto

namespace BidRequest;

use UnexpectedValueException;

/**
 * The type of auction that will be run for this query.
 *
 * Protobuf type <code>BidRequest.AuctionType</code>
 */
class AuctionType
{
    /**
     * Generated from protobuf enum <code>UNKNOWN_AUCTION_TYPE = 0;</code>
     */
    const UNKNOWN_AUCTION_TYPE = 0;
    /**
     * Generated from protobuf enum <code>FIRST_PRICE = 1;</code>
     */
    const FIRST_PRICE = 1;
    /**
     * Generated from protobuf enum <code>SECOND_PRICE = 2;</code>
     */
    const SECOND_PRICE = 2;
    /**
     * Generated from protobuf enum <code>FIXED_PRICE = 3;</code>
     */
    const FIXED_PRICE = 3;

    private static $valueToName = [
        self::UNKNOWN_AUCTION_TYPE => 'UNKNOWN_AUCTION_TYPE',
        self::FIRST_PRICE => 'FIRST_PRICE',
        self::SECOND_PRICE => 'SECOND_PRICE',
        self::FIXED_PRICE => 'FIXED_PRICE',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(AuctionType::class, \BidRequest_AuctionType::class);

