<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: realtime-bidding.proto

namespace BidRequest;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Information about the device.
 *
 * Generated from protobuf message <code>BidRequest.Device</code>
 */
class Device extends \Google\Protobuf\Internal\Message
{
    /**
     * [default = UNKNOWN_DEVICE];
     *
     * Generated from protobuf field <code>optional .BidRequest.Device.DeviceType device_type = 1;</code>
     */
    protected $device_type = null;
    /**
     * The platform of the device. Examples: android, iphone, palm
     *
     * Generated from protobuf field <code>optional string platform = 2;</code>
     */
    protected $platform = null;
    /**
     * The brand of the device (for example, "Apple" or "Samsung").
     *
     * Generated from protobuf field <code>optional string brand = 3;</code>
     */
    protected $brand = null;
    /**
     * Device model (for example, "pixel 7 pro"). For iPhone/iPad, this
     * field contains Apple's model identifier string (such as "iPhone12,1" and
     * "iPad13,8") if available. Otherwise this field contains the generic
     * model (either "iphone" or "ipad").
     *
     * Generated from protobuf field <code>optional string model = 4;</code>
     */
    protected $model = null;
    /**
     * The OS version; for example, 2 for Android 2.1, or 3.3 for iOS 3.3.1.
     *
     * Generated from protobuf field <code>optional .BidRequest.Device.OsVersion os_version = 5;</code>
     */
    protected $os_version = null;
    /**
     * Unique identifier for the mobile carrier if the device is connected to
     * the internet through a carrier (as opposed to through WiFi). To look up
     * carrier name from carrier ID, refer to:
     * https://storage.googleapis.com/adx-rtb-dictionaries/mobile-carriers.csv.
     *
     * Generated from protobuf field <code>optional int64 carrier_id = 6;</code>
     */
    protected $carrier_id = null;
    /**
     * The width of the device screen in pixels.
     *
     * Generated from protobuf field <code>optional int32 screen_width = 7;</code>
     */
    protected $screen_width = null;
    /**
     * The height of the device screen in pixels.
     *
     * Generated from protobuf field <code>optional int32 screen_height = 8;</code>
     */
    protected $screen_height = null;
    /**
     * Used for high-density devices (for example, iOS retina displays). A
     * non-default value indicates that the nominal screen size (with pixels as
     * the unit) does not describe the actual number of pixels in the screen.
     * For example, nominal width and height may be 320x640 for a screen that
     * actually has 640x1280 pixels, in which case screen_width=320,
     * screen_height=640, and screen_pixel_ratio_millis=2000, since each axis
     * has twice as many pixels as its dimensions would indicate.
     *
     * Generated from protobuf field <code>optional int32 screen_pixel_ratio_millis = 9;</code>
     */
    protected $screen_pixel_ratio_millis = null;
    /**
     * The screen orientation of the device when the ad request is sent.
     *
     * Generated from protobuf field <code>optional .BidRequest.Device.ScreenOrientation screen_orientation = 10;</code>
     */
    protected $screen_orientation = null;
    /**
     * Hardware version of the device. For iPhone/iPad, this field contains
     * Apple's model identifier string (such as "iPhone12,1" and "iPad13,8") if
     * available.
     *
     * Generated from protobuf field <code>optional string hardware_version = 11;</code>
     */
    protected $hardware_version = null;
    /**
     * "Limit Ad Tracking" is a commercially endorsed signal based on the
     * operating system or device settings, where `false` indicates that
     * tracking is unrestricted and `true` indicates that tracking must be
     * limited per commercial guidelines.
     * This signal reflects user decisions on surfaces including iOS App
     * Tracking Transparency:
     * https://developer.apple.com/documentation/apptrackingtransparency
     * See also lmt and App Tracking Transparency guidance:
     * https://github.com/InteractiveAdvertisingBureau/openrtb/blob/master/extensions/community_extensions/skadnetwork.md#dnt-lmt-and-app-tracking-transparency-guidance
     * and Android advertising ID:
     * https://support.google.com/googleplay/android-developer/answer/6048248
     *
     * Generated from protobuf field <code>optional bool limit_ad_tracking = 12;</code>
     */
    protected $limit_ad_tracking = null;
    /**
     * This field is only populated for iOS devices. Indicates the app tracking
     * authorization status. This value is retrieved from ATTrackingManager
     * and provided as is. For more information about iOS's app tracking
     * authorization status, see:
     * https://developer.apple.com/documentation/apptrackingtransparency/attrackingmanager/authorizationstatus
     *
     * Generated from protobuf field <code>optional .BidRequest.Device.AuthorizationStatus app_tracking_authorization_status = 13;</code>
     */
    protected $app_tracking_authorization_status = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int $device_type
     *           [default = UNKNOWN_DEVICE];
     *     @type string $platform
     *           The platform of the device. Examples: android, iphone, palm
     *     @type string $brand
     *           The brand of the device (for example, "Apple" or "Samsung").
     *     @type string $model
     *           Device model (for example, "pixel 7 pro"). For iPhone/iPad, this
     *           field contains Apple's model identifier string (such as "iPhone12,1" and
     *           "iPad13,8") if available. Otherwise this field contains the generic
     *           model (either "iphone" or "ipad").
     *     @type \BidRequest\Device\OsVersion $os_version
     *           The OS version; for example, 2 for Android 2.1, or 3.3 for iOS 3.3.1.
     *     @type int|string $carrier_id
     *           Unique identifier for the mobile carrier if the device is connected to
     *           the internet through a carrier (as opposed to through WiFi). To look up
     *           carrier name from carrier ID, refer to:
     *           https://storage.googleapis.com/adx-rtb-dictionaries/mobile-carriers.csv.
     *     @type int $screen_width
     *           The width of the device screen in pixels.
     *     @type int $screen_height
     *           The height of the device screen in pixels.
     *     @type int $screen_pixel_ratio_millis
     *           Used for high-density devices (for example, iOS retina displays). A
     *           non-default value indicates that the nominal screen size (with pixels as
     *           the unit) does not describe the actual number of pixels in the screen.
     *           For example, nominal width and height may be 320x640 for a screen that
     *           actually has 640x1280 pixels, in which case screen_width=320,
     *           screen_height=640, and screen_pixel_ratio_millis=2000, since each axis
     *           has twice as many pixels as its dimensions would indicate.
     *     @type int $screen_orientation
     *           The screen orientation of the device when the ad request is sent.
     *     @type string $hardware_version
     *           Hardware version of the device. For iPhone/iPad, this field contains
     *           Apple's model identifier string (such as "iPhone12,1" and "iPad13,8") if
     *           available.
     *     @type bool $limit_ad_tracking
     *           "Limit Ad Tracking" is a commercially endorsed signal based on the
     *           operating system or device settings, where `false` indicates that
     *           tracking is unrestricted and `true` indicates that tracking must be
     *           limited per commercial guidelines.
     *           This signal reflects user decisions on surfaces including iOS App
     *           Tracking Transparency:
     *           https://developer.apple.com/documentation/apptrackingtransparency
     *           See also lmt and App Tracking Transparency guidance:
     *           https://github.com/InteractiveAdvertisingBureau/openrtb/blob/master/extensions/community_extensions/skadnetwork.md#dnt-lmt-and-app-tracking-transparency-guidance
     *           and Android advertising ID:
     *           https://support.google.com/googleplay/android-developer/answer/6048248
     *     @type int $app_tracking_authorization_status
     *           This field is only populated for iOS devices. Indicates the app tracking
     *           authorization status. This value is retrieved from ATTrackingManager
     *           and provided as is. For more information about iOS's app tracking
     *           authorization status, see:
     *           https://developer.apple.com/documentation/apptrackingtransparency/attrackingmanager/authorizationstatus
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\RealtimeBidding::initOnce();
        parent::__construct($data);
    }

    /**
     * [default = UNKNOWN_DEVICE];
     *
     * Generated from protobuf field <code>optional .BidRequest.Device.DeviceType device_type = 1;</code>
     * @return int
     */
    public function getDeviceType()
    {
        return isset($this->device_type) ? $this->device_type : 0;
    }

    public function hasDeviceType()
    {
        return isset($this->device_type);
    }

    public function clearDeviceType()
    {
        unset($this->device_type);
    }

    /**
     * [default = UNKNOWN_DEVICE];
     *
     * Generated from protobuf field <code>optional .BidRequest.Device.DeviceType device_type = 1;</code>
     * @param int $var
     * @return $this
     */
    public function setDeviceType($var)
    {
        GPBUtil::checkEnum($var, \BidRequest\Device\DeviceType::class);
        $this->device_type = $var;

        return $this;
    }

    /**
     * The platform of the device. Examples: android, iphone, palm
     *
     * Generated from protobuf field <code>optional string platform = 2;</code>
     * @return string
     */
    public function getPlatform()
    {
        return isset($this->platform) ? $this->platform : '';
    }

    public function hasPlatform()
    {
        return isset($this->platform);
    }

    public function clearPlatform()
    {
        unset($this->platform);
    }

    /**
     * The platform of the device. Examples: android, iphone, palm
     *
     * Generated from protobuf field <code>optional string platform = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setPlatform($var)
    {
        GPBUtil::checkString($var, True);
        $this->platform = $var;

        return $this;
    }

    /**
     * The brand of the device (for example, "Apple" or "Samsung").
     *
     * Generated from protobuf field <code>optional string brand = 3;</code>
     * @return string
     */
    public function getBrand()
    {
        return isset($this->brand) ? $this->brand : '';
    }

    public function hasBrand()
    {
        return isset($this->brand);
    }

    public function clearBrand()
    {
        unset($this->brand);
    }

    /**
     * The brand of the device (for example, "Apple" or "Samsung").
     *
     * Generated from protobuf field <code>optional string brand = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setBrand($var)
    {
        GPBUtil::checkString($var, True);
        $this->brand = $var;

        return $this;
    }

    /**
     * Device model (for example, "pixel 7 pro"). For iPhone/iPad, this
     * field contains Apple's model identifier string (such as "iPhone12,1" and
     * "iPad13,8") if available. Otherwise this field contains the generic
     * model (either "iphone" or "ipad").
     *
     * Generated from protobuf field <code>optional string model = 4;</code>
     * @return string
     */
    public function getModel()
    {
        return isset($this->model) ? $this->model : '';
    }

    public function hasModel()
    {
        return isset($this->model);
    }

    public function clearModel()
    {
        unset($this->model);
    }

    /**
     * Device model (for example, "pixel 7 pro"). For iPhone/iPad, this
     * field contains Apple's model identifier string (such as "iPhone12,1" and
     * "iPad13,8") if available. Otherwise this field contains the generic
     * model (either "iphone" or "ipad").
     *
     * Generated from protobuf field <code>optional string model = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setModel($var)
    {
        GPBUtil::checkString($var, True);
        $this->model = $var;

        return $this;
    }

    /**
     * The OS version; for example, 2 for Android 2.1, or 3.3 for iOS 3.3.1.
     *
     * Generated from protobuf field <code>optional .BidRequest.Device.OsVersion os_version = 5;</code>
     * @return \BidRequest\Device\OsVersion|null
     */
    public function getOsVersion()
    {
        return $this->os_version;
    }

    public function hasOsVersion()
    {
        return isset($this->os_version);
    }

    public function clearOsVersion()
    {
        unset($this->os_version);
    }

    /**
     * The OS version; for example, 2 for Android 2.1, or 3.3 for iOS 3.3.1.
     *
     * Generated from protobuf field <code>optional .BidRequest.Device.OsVersion os_version = 5;</code>
     * @param \BidRequest\Device\OsVersion $var
     * @return $this
     */
    public function setOsVersion($var)
    {
        GPBUtil::checkMessage($var, \BidRequest\Device\OsVersion::class);
        $this->os_version = $var;

        return $this;
    }

    /**
     * Unique identifier for the mobile carrier if the device is connected to
     * the internet through a carrier (as opposed to through WiFi). To look up
     * carrier name from carrier ID, refer to:
     * https://storage.googleapis.com/adx-rtb-dictionaries/mobile-carriers.csv.
     *
     * Generated from protobuf field <code>optional int64 carrier_id = 6;</code>
     * @return int|string
     */
    public function getCarrierId()
    {
        return isset($this->carrier_id) ? $this->carrier_id : 0;
    }

    public function hasCarrierId()
    {
        return isset($this->carrier_id);
    }

    public function clearCarrierId()
    {
        unset($this->carrier_id);
    }

    /**
     * Unique identifier for the mobile carrier if the device is connected to
     * the internet through a carrier (as opposed to through WiFi). To look up
     * carrier name from carrier ID, refer to:
     * https://storage.googleapis.com/adx-rtb-dictionaries/mobile-carriers.csv.
     *
     * Generated from protobuf field <code>optional int64 carrier_id = 6;</code>
     * @param int|string $var
     * @return $this
     */
    public function setCarrierId($var)
    {
        GPBUtil::checkInt64($var);
        $this->carrier_id = $var;

        return $this;
    }

    /**
     * The width of the device screen in pixels.
     *
     * Generated from protobuf field <code>optional int32 screen_width = 7;</code>
     * @return int
     */
    public function getScreenWidth()
    {
        return isset($this->screen_width) ? $this->screen_width : 0;
    }

    public function hasScreenWidth()
    {
        return isset($this->screen_width);
    }

    public function clearScreenWidth()
    {
        unset($this->screen_width);
    }

    /**
     * The width of the device screen in pixels.
     *
     * Generated from protobuf field <code>optional int32 screen_width = 7;</code>
     * @param int $var
     * @return $this
     */
    public function setScreenWidth($var)
    {
        GPBUtil::checkInt32($var);
        $this->screen_width = $var;

        return $this;
    }

    /**
     * The height of the device screen in pixels.
     *
     * Generated from protobuf field <code>optional int32 screen_height = 8;</code>
     * @return int
     */
    public function getScreenHeight()
    {
        return isset($this->screen_height) ? $this->screen_height : 0;
    }

    public function hasScreenHeight()
    {
        return isset($this->screen_height);
    }

    public function clearScreenHeight()
    {
        unset($this->screen_height);
    }

    /**
     * The height of the device screen in pixels.
     *
     * Generated from protobuf field <code>optional int32 screen_height = 8;</code>
     * @param int $var
     * @return $this
     */
    public function setScreenHeight($var)
    {
        GPBUtil::checkInt32($var);
        $this->screen_height = $var;

        return $this;
    }

    /**
     * Used for high-density devices (for example, iOS retina displays). A
     * non-default value indicates that the nominal screen size (with pixels as
     * the unit) does not describe the actual number of pixels in the screen.
     * For example, nominal width and height may be 320x640 for a screen that
     * actually has 640x1280 pixels, in which case screen_width=320,
     * screen_height=640, and screen_pixel_ratio_millis=2000, since each axis
     * has twice as many pixels as its dimensions would indicate.
     *
     * Generated from protobuf field <code>optional int32 screen_pixel_ratio_millis = 9;</code>
     * @return int
     */
    public function getScreenPixelRatioMillis()
    {
        return isset($this->screen_pixel_ratio_millis) ? $this->screen_pixel_ratio_millis : 0;
    }

    public function hasScreenPixelRatioMillis()
    {
        return isset($this->screen_pixel_ratio_millis);
    }

    public function clearScreenPixelRatioMillis()
    {
        unset($this->screen_pixel_ratio_millis);
    }

    /**
     * Used for high-density devices (for example, iOS retina displays). A
     * non-default value indicates that the nominal screen size (with pixels as
     * the unit) does not describe the actual number of pixels in the screen.
     * For example, nominal width and height may be 320x640 for a screen that
     * actually has 640x1280 pixels, in which case screen_width=320,
     * screen_height=640, and screen_pixel_ratio_millis=2000, since each axis
     * has twice as many pixels as its dimensions would indicate.
     *
     * Generated from protobuf field <code>optional int32 screen_pixel_ratio_millis = 9;</code>
     * @param int $var
     * @return $this
     */
    public function setScreenPixelRatioMillis($var)
    {
        GPBUtil::checkInt32($var);
        $this->screen_pixel_ratio_millis = $var;

        return $this;
    }

    /**
     * The screen orientation of the device when the ad request is sent.
     *
     * Generated from protobuf field <code>optional .BidRequest.Device.ScreenOrientation screen_orientation = 10;</code>
     * @return int
     */
    public function getScreenOrientation()
    {
        return isset($this->screen_orientation) ? $this->screen_orientation : 0;
    }

    public function hasScreenOrientation()
    {
        return isset($this->screen_orientation);
    }

    public function clearScreenOrientation()
    {
        unset($this->screen_orientation);
    }

    /**
     * The screen orientation of the device when the ad request is sent.
     *
     * Generated from protobuf field <code>optional .BidRequest.Device.ScreenOrientation screen_orientation = 10;</code>
     * @param int $var
     * @return $this
     */
    public function setScreenOrientation($var)
    {
        GPBUtil::checkEnum($var, \BidRequest\Device\ScreenOrientation::class);
        $this->screen_orientation = $var;

        return $this;
    }

    /**
     * Hardware version of the device. For iPhone/iPad, this field contains
     * Apple's model identifier string (such as "iPhone12,1" and "iPad13,8") if
     * available.
     *
     * Generated from protobuf field <code>optional string hardware_version = 11;</code>
     * @return string
     */
    public function getHardwareVersion()
    {
        return isset($this->hardware_version) ? $this->hardware_version : '';
    }

    public function hasHardwareVersion()
    {
        return isset($this->hardware_version);
    }

    public function clearHardwareVersion()
    {
        unset($this->hardware_version);
    }

    /**
     * Hardware version of the device. For iPhone/iPad, this field contains
     * Apple's model identifier string (such as "iPhone12,1" and "iPad13,8") if
     * available.
     *
     * Generated from protobuf field <code>optional string hardware_version = 11;</code>
     * @param string $var
     * @return $this
     */
    public function setHardwareVersion($var)
    {
        GPBUtil::checkString($var, True);
        $this->hardware_version = $var;

        return $this;
    }

    /**
     * "Limit Ad Tracking" is a commercially endorsed signal based on the
     * operating system or device settings, where `false` indicates that
     * tracking is unrestricted and `true` indicates that tracking must be
     * limited per commercial guidelines.
     * This signal reflects user decisions on surfaces including iOS App
     * Tracking Transparency:
     * https://developer.apple.com/documentation/apptrackingtransparency
     * See also lmt and App Tracking Transparency guidance:
     * https://github.com/InteractiveAdvertisingBureau/openrtb/blob/master/extensions/community_extensions/skadnetwork.md#dnt-lmt-and-app-tracking-transparency-guidance
     * and Android advertising ID:
     * https://support.google.com/googleplay/android-developer/answer/6048248
     *
     * Generated from protobuf field <code>optional bool limit_ad_tracking = 12;</code>
     * @return bool
     */
    public function getLimitAdTracking()
    {
        return isset($this->limit_ad_tracking) ? $this->limit_ad_tracking : false;
    }

    public function hasLimitAdTracking()
    {
        return isset($this->limit_ad_tracking);
    }

    public function clearLimitAdTracking()
    {
        unset($this->limit_ad_tracking);
    }

    /**
     * "Limit Ad Tracking" is a commercially endorsed signal based on the
     * operating system or device settings, where `false` indicates that
     * tracking is unrestricted and `true` indicates that tracking must be
     * limited per commercial guidelines.
     * This signal reflects user decisions on surfaces including iOS App
     * Tracking Transparency:
     * https://developer.apple.com/documentation/apptrackingtransparency
     * See also lmt and App Tracking Transparency guidance:
     * https://github.com/InteractiveAdvertisingBureau/openrtb/blob/master/extensions/community_extensions/skadnetwork.md#dnt-lmt-and-app-tracking-transparency-guidance
     * and Android advertising ID:
     * https://support.google.com/googleplay/android-developer/answer/6048248
     *
     * Generated from protobuf field <code>optional bool limit_ad_tracking = 12;</code>
     * @param bool $var
     * @return $this
     */
    public function setLimitAdTracking($var)
    {
        GPBUtil::checkBool($var);
        $this->limit_ad_tracking = $var;

        return $this;
    }

    /**
     * This field is only populated for iOS devices. Indicates the app tracking
     * authorization status. This value is retrieved from ATTrackingManager
     * and provided as is. For more information about iOS's app tracking
     * authorization status, see:
     * https://developer.apple.com/documentation/apptrackingtransparency/attrackingmanager/authorizationstatus
     *
     * Generated from protobuf field <code>optional .BidRequest.Device.AuthorizationStatus app_tracking_authorization_status = 13;</code>
     * @return int
     */
    public function getAppTrackingAuthorizationStatus()
    {
        return isset($this->app_tracking_authorization_status) ? $this->app_tracking_authorization_status : 0;
    }

    public function hasAppTrackingAuthorizationStatus()
    {
        return isset($this->app_tracking_authorization_status);
    }

    public function clearAppTrackingAuthorizationStatus()
    {
        unset($this->app_tracking_authorization_status);
    }

    /**
     * This field is only populated for iOS devices. Indicates the app tracking
     * authorization status. This value is retrieved from ATTrackingManager
     * and provided as is. For more information about iOS's app tracking
     * authorization status, see:
     * https://developer.apple.com/documentation/apptrackingtransparency/attrackingmanager/authorizationstatus
     *
     * Generated from protobuf field <code>optional .BidRequest.Device.AuthorizationStatus app_tracking_authorization_status = 13;</code>
     * @param int $var
     * @return $this
     */
    public function setAppTrackingAuthorizationStatus($var)
    {
        GPBUtil::checkEnum($var, \BidRequest\Device\AuthorizationStatus::class);
        $this->app_tracking_authorization_status = $var;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Device::class, \BidRequest_Device::class);

