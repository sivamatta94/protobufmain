<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: realtime-bidding.proto

namespace BidRequest;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * The user's approximate geographic location. All location information is
 * IP geolocation-derived. The lat/lon fields may be a reference position
 * (for example, centroid) for the IP geolocation-derived location that's also
 * carried by the other fields (for example, a city), and accuracy will be the
 * radius of a circle with the approximate area of that location. Location and
 * its accuracy will be fuzzified as necessary to protect user privacy. See
 * Geotargeting Guide:
 * https://developers.google.com/authorized-buyers/rtb/geotargeting
 *
 * Generated from protobuf message <code>BidRequest.Geo</code>
 */
class Geo extends \Google\Protobuf\Internal\Message
{
    /**
     * Latitude from -90.0 to +90.0, where negative is south.
     *
     * Generated from protobuf field <code>optional double lat = 1;</code>
     */
    protected $lat = null;
    /**
     * Longitude from -180.0 to +180.0, where negative is west.
     *
     * Generated from protobuf field <code>optional double lon = 2;</code>
     */
    protected $lon = null;
    /**
     * Country using ISO-3166-1 Alpha-3.
     *
     * Generated from protobuf field <code>optional string country = 3;</code>
     */
    protected $country = null;
    /**
     * Region code using ISO-3166-2; 2-letter state code if USA.
     *
     * Generated from protobuf field <code>optional string region = 4;</code>
     */
    protected $region = null;
    /**
     * Google metro code; similar to but not exactly Nielsen DMAs.
     *
     * Generated from protobuf field <code>optional string metro = 6;</code>
     */
    protected $metro = null;
    /**
     * City using United Nations Code for Trade & Transport Locations.
     * (https://www.unece.org/cefact/locode/service/location.htm).
     *
     * Generated from protobuf field <code>optional string city = 7;</code>
     */
    protected $city = null;
    /**
     * Zip/postal code.
     *
     * Generated from protobuf field <code>optional string zip = 8;</code>
     */
    protected $zip = null;
    /**
     * Estimated location accuracy in meters.
     *
     * Generated from protobuf field <code>optional int32 accuracy = 11;</code>
     */
    protected $accuracy = null;
    /**
     * Local time as the number +/- of minutes from UTC.
     *
     * Generated from protobuf field <code>optional int32 utcoffset = 10;</code>
     */
    protected $utcoffset = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type float $lat
     *           Latitude from -90.0 to +90.0, where negative is south.
     *     @type float $lon
     *           Longitude from -180.0 to +180.0, where negative is west.
     *     @type string $country
     *           Country using ISO-3166-1 Alpha-3.
     *     @type string $region
     *           Region code using ISO-3166-2; 2-letter state code if USA.
     *     @type string $metro
     *           Google metro code; similar to but not exactly Nielsen DMAs.
     *     @type string $city
     *           City using United Nations Code for Trade & Transport Locations.
     *           (https://www.unece.org/cefact/locode/service/location.htm).
     *     @type string $zip
     *           Zip/postal code.
     *     @type int $accuracy
     *           Estimated location accuracy in meters.
     *     @type int $utcoffset
     *           Local time as the number +/- of minutes from UTC.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\RealtimeBidding::initOnce();
        parent::__construct($data);
    }

    /**
     * Latitude from -90.0 to +90.0, where negative is south.
     *
     * Generated from protobuf field <code>optional double lat = 1;</code>
     * @return float
     */
    public function getLat()
    {
        return isset($this->lat) ? $this->lat : 0.0;
    }

    public function hasLat()
    {
        return isset($this->lat);
    }

    public function clearLat()
    {
        unset($this->lat);
    }

    /**
     * Latitude from -90.0 to +90.0, where negative is south.
     *
     * Generated from protobuf field <code>optional double lat = 1;</code>
     * @param float $var
     * @return $this
     */
    public function setLat($var)
    {
        GPBUtil::checkDouble($var);
        $this->lat = $var;

        return $this;
    }

    /**
     * Longitude from -180.0 to +180.0, where negative is west.
     *
     * Generated from protobuf field <code>optional double lon = 2;</code>
     * @return float
     */
    public function getLon()
    {
        return isset($this->lon) ? $this->lon : 0.0;
    }

    public function hasLon()
    {
        return isset($this->lon);
    }

    public function clearLon()
    {
        unset($this->lon);
    }

    /**
     * Longitude from -180.0 to +180.0, where negative is west.
     *
     * Generated from protobuf field <code>optional double lon = 2;</code>
     * @param float $var
     * @return $this
     */
    public function setLon($var)
    {
        GPBUtil::checkDouble($var);
        $this->lon = $var;

        return $this;
    }

    /**
     * Country using ISO-3166-1 Alpha-3.
     *
     * Generated from protobuf field <code>optional string country = 3;</code>
     * @return string
     */
    public function getCountry()
    {
        return isset($this->country) ? $this->country : '';
    }

    public function hasCountry()
    {
        return isset($this->country);
    }

    public function clearCountry()
    {
        unset($this->country);
    }

    /**
     * Country using ISO-3166-1 Alpha-3.
     *
     * Generated from protobuf field <code>optional string country = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setCountry($var)
    {
        GPBUtil::checkString($var, True);
        $this->country = $var;

        return $this;
    }

    /**
     * Region code using ISO-3166-2; 2-letter state code if USA.
     *
     * Generated from protobuf field <code>optional string region = 4;</code>
     * @return string
     */
    public function getRegion()
    {
        return isset($this->region) ? $this->region : '';
    }

    public function hasRegion()
    {
        return isset($this->region);
    }

    public function clearRegion()
    {
        unset($this->region);
    }

    /**
     * Region code using ISO-3166-2; 2-letter state code if USA.
     *
     * Generated from protobuf field <code>optional string region = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setRegion($var)
    {
        GPBUtil::checkString($var, True);
        $this->region = $var;

        return $this;
    }

    /**
     * Google metro code; similar to but not exactly Nielsen DMAs.
     *
     * Generated from protobuf field <code>optional string metro = 6;</code>
     * @return string
     */
    public function getMetro()
    {
        return isset($this->metro) ? $this->metro : '';
    }

    public function hasMetro()
    {
        return isset($this->metro);
    }

    public function clearMetro()
    {
        unset($this->metro);
    }

    /**
     * Google metro code; similar to but not exactly Nielsen DMAs.
     *
     * Generated from protobuf field <code>optional string metro = 6;</code>
     * @param string $var
     * @return $this
     */
    public function setMetro($var)
    {
        GPBUtil::checkString($var, True);
        $this->metro = $var;

        return $this;
    }

    /**
     * City using United Nations Code for Trade & Transport Locations.
     * (https://www.unece.org/cefact/locode/service/location.htm).
     *
     * Generated from protobuf field <code>optional string city = 7;</code>
     * @return string
     */
    public function getCity()
    {
        return isset($this->city) ? $this->city : '';
    }

    public function hasCity()
    {
        return isset($this->city);
    }

    public function clearCity()
    {
        unset($this->city);
    }

    /**
     * City using United Nations Code for Trade & Transport Locations.
     * (https://www.unece.org/cefact/locode/service/location.htm).
     *
     * Generated from protobuf field <code>optional string city = 7;</code>
     * @param string $var
     * @return $this
     */
    public function setCity($var)
    {
        GPBUtil::checkString($var, True);
        $this->city = $var;

        return $this;
    }

    /**
     * Zip/postal code.
     *
     * Generated from protobuf field <code>optional string zip = 8;</code>
     * @return string
     */
    public function getZip()
    {
        return isset($this->zip) ? $this->zip : '';
    }

    public function hasZip()
    {
        return isset($this->zip);
    }

    public function clearZip()
    {
        unset($this->zip);
    }

    /**
     * Zip/postal code.
     *
     * Generated from protobuf field <code>optional string zip = 8;</code>
     * @param string $var
     * @return $this
     */
    public function setZip($var)
    {
        GPBUtil::checkString($var, True);
        $this->zip = $var;

        return $this;
    }

    /**
     * Estimated location accuracy in meters.
     *
     * Generated from protobuf field <code>optional int32 accuracy = 11;</code>
     * @return int
     */
    public function getAccuracy()
    {
        return isset($this->accuracy) ? $this->accuracy : 0;
    }

    public function hasAccuracy()
    {
        return isset($this->accuracy);
    }

    public function clearAccuracy()
    {
        unset($this->accuracy);
    }

    /**
     * Estimated location accuracy in meters.
     *
     * Generated from protobuf field <code>optional int32 accuracy = 11;</code>
     * @param int $var
     * @return $this
     */
    public function setAccuracy($var)
    {
        GPBUtil::checkInt32($var);
        $this->accuracy = $var;

        return $this;
    }

    /**
     * Local time as the number +/- of minutes from UTC.
     *
     * Generated from protobuf field <code>optional int32 utcoffset = 10;</code>
     * @return int
     */
    public function getUtcoffset()
    {
        return isset($this->utcoffset) ? $this->utcoffset : 0;
    }

    public function hasUtcoffset()
    {
        return isset($this->utcoffset);
    }

    public function clearUtcoffset()
    {
        unset($this->utcoffset);
    }

    /**
     * Local time as the number +/- of minutes from UTC.
     *
     * Generated from protobuf field <code>optional int32 utcoffset = 10;</code>
     * @param int $var
     * @return $this
     */
    public function setUtcoffset($var)
    {
        GPBUtil::checkInt32($var);
        $this->utcoffset = $var;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Geo::class, \BidRequest_Geo::class);

