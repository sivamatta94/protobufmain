<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: realtime-bidding.proto

namespace BidRequest\Video;

use UnexpectedValueException;

/**
 * Describes how the video ad will be played. The playback method is
 * determined to be auto-play, click-to-play or mouse-over based on the best
 * measurement available. This includes things like how recently the user
 * interacted with a web page. For auto-play, ads can start playing with the
 * sound on or off. Some ads (for example, in-feed ads) are muted until the
 * user interacts with the ad. Alternatively, if an ad would normally play
 * with the sound on but the device is muted then the value will be set to
 * sound off. For devices where it is not possible to determine if the
 * device is muted (for example, desktop), we assume that sound is on.
 *
 * Protobuf type <code>BidRequest.Video.VideoPlaybackMethod</code>
 */
class VideoPlaybackMethod
{
    /**
     * Generated from protobuf enum <code>METHOD_UNKNOWN = 0;</code>
     */
    const METHOD_UNKNOWN = 0;
    /**
     * Generated from protobuf enum <code>AUTO_PLAY_SOUND_ON = 1;</code>
     */
    const AUTO_PLAY_SOUND_ON = 1;
    /**
     * Generated from protobuf enum <code>AUTO_PLAY_SOUND_OFF = 2;</code>
     */
    const AUTO_PLAY_SOUND_OFF = 2;
    /**
     * Generated from protobuf enum <code>CLICK_TO_PLAY = 3;</code>
     */
    const CLICK_TO_PLAY = 3;
    /**
     * Generated from protobuf enum <code>MOUSE_OVER = 4;</code>
     */
    const MOUSE_OVER = 4;
    /**
     * Generated from protobuf enum <code>INITIATE_ON_ENTERING_VIEWPORT_SOUND_ON = 5;</code>
     */
    const INITIATE_ON_ENTERING_VIEWPORT_SOUND_ON = 5;
    /**
     * Generated from protobuf enum <code>INITIATE_ON_ENTERING_VIEWPORT_SOUND_OFF = 6;</code>
     */
    const INITIATE_ON_ENTERING_VIEWPORT_SOUND_OFF = 6;

    private static $valueToName = [
        self::METHOD_UNKNOWN => 'METHOD_UNKNOWN',
        self::AUTO_PLAY_SOUND_ON => 'AUTO_PLAY_SOUND_ON',
        self::AUTO_PLAY_SOUND_OFF => 'AUTO_PLAY_SOUND_OFF',
        self::CLICK_TO_PLAY => 'CLICK_TO_PLAY',
        self::MOUSE_OVER => 'MOUSE_OVER',
        self::INITIATE_ON_ENTERING_VIEWPORT_SOUND_ON => 'INITIATE_ON_ENTERING_VIEWPORT_SOUND_ON',
        self::INITIATE_ON_ENTERING_VIEWPORT_SOUND_OFF => 'INITIATE_ON_ENTERING_VIEWPORT_SOUND_OFF',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(VideoPlaybackMethod::class, \BidRequest_Video_VideoPlaybackMethod::class);

